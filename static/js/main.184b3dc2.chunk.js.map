{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["src_App_0","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","history","squares","Array","fill","stepNumber","xIsNext","i","slice","length","calculateWinner","setState","concat","step","status","_this2","current","winner","moves","map","move","desc","react_default","a","createElement","key","onClick","jumpTo","className","App_Board","handleClick","Component","Square","value","Board","_this3","renderSquare","React","lines","_lines$i","slicedToArray","b","c","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.184b3dc2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null)\n        }\n      ],\n      stepNumber: 0,\n      xIsNext: true\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n    this.setState({\n      history: history.concat([\n        {\n          squares: squares\n        }\n      ]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n\n    const moves = history.map((step, move) => {\n      const desc = move ?\n        'Go to move #' + move :\n        'Go to game start';\n      return (\n        <li key={move}>\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\n        </li>\n      );\n    });\n\n    let status;\n    if (winner) {\n      status = \"Winner: \" + winner;\n    } else {\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={i => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\nfunction Square(props) {\n  return (\n    <button\n      className='square'\n      onClick={props.onClick}>\n        {props.value}\n      </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return (\n      <Square\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}